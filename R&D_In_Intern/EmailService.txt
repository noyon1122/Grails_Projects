package pos

import org.springframework.web.multipart.MultipartFile
import javax.mail.*
import javax.mail.internet.*
import javax.activation.*
import javax.mail.util.ByteArrayDataSource
import java.util.concurrent.*

class SendMailService {

    def grailsApplication
    def threadPoolService

    def sendEmail(String to, String subject, String body, MultipartFile uploadedFile) {
        // Copy file bytes and info inside the service
        byte[] fileBytes = uploadedFile.bytes
        String contentType = uploadedFile.contentType

        Runnable emailTask = {
            def smtp = grailsApplication.config.smtp
            final String username = smtp.username
            final String password = smtp.password
            String from = smtp.from

            try {
                Properties props = new Properties()
                props.put("mail.smtp.auth", smtp.props["mail.smtp.auth"])
                props.put("mail.smtp.starttls.enable", smtp.props["mail.smtp.starttls.enable"])
                props.put("mail.smtp.host", smtp.host)
                props.put("mail.smtp.port", smtp.port.toString())

                Session session = Session.getInstance(props, new Authenticator() {
                    protected PasswordAuthentication getPasswordAuthentication() {
                        return new PasswordAuthentication(username, password)
                    }
                })

                MimeMessage message = new MimeMessage(session)
                message.setFrom(new InternetAddress(from))
                message.setRecipients(Message.RecipientType.TO, InternetAddress.parse(to))
                message.setSubject(subject)

                String cid = "inlineImage"
                String finalHtml = "${body}<br><img src='cid:${cid}' style='max-width: 400px;'>"

                MimeBodyPart htmlPart = new MimeBodyPart()
                htmlPart.setContent(finalHtml, "text/html; charset=utf-8")

                MimeBodyPart imagePart = new MimeBodyPart()
                DataSource fds = new ByteArrayDataSource(fileBytes, contentType)
                imagePart.setDataHandler(new DataHandler(fds))
                imagePart.setHeader("Content-ID", "<${cid}>")
                imagePart.setDisposition(MimeBodyPart.INLINE)

                Multipart multipart = new MimeMultipart()
                multipart.addBodyPart(htmlPart)
                multipart.addBodyPart(imagePart)
                message.setContent(multipart)

                Transport.send(message)
                log.info "Email sent to ${to}"
            } catch (Exception e) {
                log.error "Failed to send email to ${to}: ${e.message}", e
            }
        }

        threadPoolService.execute(emailTask)
        return true
    }
}
